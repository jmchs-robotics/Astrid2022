// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

    public static ADXRS450_Gyro roborioGyro;

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Drivetrain m_drive = new Drivetrain();
    public final ClipSubsystem m_Clip = new ClipSubsystem();
    public final HookSubsystem m_Hook = new HookSubsystem();
    public final RollerIntake m_Intake = new RollerIntake();

// Joysticks
private final XboxController subStick = new XboxController(1);
private final static XboxController driveStick = new XboxController(0);
private final JoystickButton driveA = new JoystickButton(driveStick, XboxController.Button.kA.value);
private final JoystickButton driveB = new JoystickButton(driveStick, XboxController.Button.kB.value);    
private final JoystickButton driveX = new JoystickButton(driveStick, XboxController.Button.kX.value); 
private final JoystickButton driveY = new JoystickButton(driveStick, XboxController.Button.kY.value); 
private final JoystickButton driveLB = new JoystickButton(driveStick, XboxController.Button.kLeftBumper.value);
private final JoystickButton driveRB = new JoystickButton(driveStick, XboxController.Button.kRightBumper.value);
private final JoystickButton subA = new JoystickButton(subStick, XboxController.Button.kA.value);    
private final JoystickButton subB = new JoystickButton(subStick, XboxController.Button.kB.value);   
private final JoystickButton subX = new JoystickButton(subStick, XboxController.Button.kX.value);  
private final JoystickButton subY = new JoystickButton(subStick, XboxController.Button.kY.value);  
private final JoystickButton subLB = new JoystickButton(subStick, XboxController.Button.kLeftBumper.value); 
private final JoystickButton subRB = new JoystickButton(subStick, XboxController.Button.kRightBumper.value); 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("extendHook", new extendHook(m_Hook));
    SmartDashboard.putData("retractHook", new retractHook(m_Hook));
    SmartDashboard.putData("pushClipArm", new pushClipArm(m_Clip));
    SmartDashboard.putData("pullClipArm", new pullClipArm(m_Clip));
    SmartDashboard.putData("driveStraight", new driveStraight(m_drive, 0, 0, true));
    SmartDashboard.putData("turn", new turn(m_drive,0, 0, 0));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // m_chooser.addOption("auto1", new auto1());
    // m_chooser.setDefaultOption("auto1", new auto1());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        // Create some buttons 
/*
        driveA.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveA",new auto1() );
     
driveB.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveB",new auto1() );
       
driveX.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveX",new auto1() );

driveY.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveY",new auto1() );
       
driveLB.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveLB",new auto1() );
        
driveRB.whenPressed(new auto1() ,true);
    SmartDashboard.putData("driveRB",new auto1() );

*/
subA.whenPressed(
    new retractHook(m_Hook)
);   
subB.whenPressed(
    new pushClipArm(m_Clip)
);
subX.whenPressed(
    new pushClipArm(m_Clip)
);
subY.whenPressed(
    new extendHook(m_Hook)
);
subLB.whenPressed(
    new consumeCargo(m_Intake)
);
subRB.whenPressed(
    new consumeCargo(m_Intake)
);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public static XboxController getdriveStick() {
      return driveStick;
    }

public XboxController getsubStick() {
      return subStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

